map.df <- fortify(map)
map.df <- merge(map.df,map.data,by="id")
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
### Salvando o plot como imagem
png(filename = "/plots/CumAcc_Put",PuT)
### Salvando o plot como imagem
png(filename = "/plots/CumAcc_Put",PuT)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
### Salvando o plot como imagem
png(filename = "/plots/CumAcc_Put",PuT,".png")
### Salvando o plot como imagem
filename <- "/plots/CumAcc_Put",PuT,".png"
### Salvando o plot como imagem
filename <- "/plots/CumAcc_Put" + PuT + ".png"
### Salvando o plot como imagem
filename <- "/plots/CumAcc_Put" + as.character(PuT) + ".png"
### Salvando o plot como imagem
filename <- "/plots/CumAcc_Put" %>%  as.character(PuT) %>%  ".png"
### Salvando o plot como imagem
filename <- paste("/plots/CumAcc_Put", as.character(PuT), ".png")
### Salvando o plot como imagem
filename <- paste("/plots/CumAcc_Put",as.character(PuT), ".png")
### Salvando o plot como imagem
filename <- paste("/plots/CumAcc_Put",PuT, ".png")
### Salvando o plot como imagem
filename <- paste("/plots/CumAcc_Put",PuT, ".png",sep = "")
### Salvando o plot como imagem
filename <-
png(filename = paste("/plots/CumAcc_Put",PuT, ".png",sep = ""))
### Salvando o plot como imagem
filename <- paste("/plots/CumAcc_Put",PuT, ".png",sep = "")
png(filename = filename)
### Salvando o plot como imagem
filename <- paste("plots/CumAcc_Put",PuT, ".png",sep = "")
png(filename = filename)
dev.print(png, filename)
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
plot(plot.natural)
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
graphics.off()
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
### Salvando o plot como imagem
filename <- paste("plots/CumAcc_Put",PuT, ".png",sep = "")
dev.print(png, filename)
dev.off()
### Salvando o plot como imagem
filename <- paste("plots/CumAcc_Put",PuT, ".png",sep = "")
png(filename = filename)
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
### Salvando o plot como imagem
filename <- paste("plots/CumAcc_Put",PuT, ".png",sep = "")
pdf(filename = filename)
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
### Salvando o plot como imagem
filename <- paste("plots/CumAcc_Put",PuT, ".pdf",sep = "")
pdf(filename = filename)
### Salvando o plot como imagem
filename <- paste("plots/CumAcc_Put",PuT, ".pdf",sep = "")
pdf(file = filename)
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
pdf(file = paste("plots/CumAcc_Put",PuT, ".pdf",sep = ""))
png(filename = paste("plots/CumAcc_Put",PuT, ".png",sep = ""), width = 480, height = 480, units = "px")
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
png(filename = paste("plots/CumAcc_Put",PuT, ".png",sep = ""), width = 480, height = 480, units = "px")
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
png(filename = paste("plots/CumAcc_Put",PuT, ".png",sep = ""), width = 800, height = 800, units = "px")
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
png(filename = paste("plots/CumAcc_Put",PuT, ".png",sep = ""), width = 1000, height = 1000, units = "px")
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
graphics.off()
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
graphics.off()
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", i, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
graphics.off()
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
### Define e tempo PuT
PuT <- 60
### Trata os tempos de viagem da Matriz OD e aplica o limiar de busca de empregos
dij2[dij2==0] <- 1
dij2[dij2>PuT] <- 0
dij2[dij2>0] <- 1
### Cria matriz de empregos com o mesmo número de linhas e colunas que a matriz de tempos
pop <- apply(Dj,1,sum)
pop <- matrix(pop,NROW(dij2),NCOL(dij2))
pop <- t(pop)
### Calcula os empregos que estão dentro do limiar de tempo de viagem parametrizado
total <- dij2*pop
result <- apply(total,1,sum)
result <- result[1:NCOL(dij2)]
### Calculo da acessibilidade cumulativa
cumacc <- result
Dj<-Dj0[Dj1]
result <- cbind (Dj,cumacc)
natural.interval <- classIntervals(result$cumacc,10, style = "jenks")$brks
### Define e tempo PuT
PuT <- 30
### Cria uma variável vazia com os campos abaixo
Dj1 <- c("OBJECTID","code","X","Y", "workplaceP")
Dj2 <- c("workplaceP")
### Atribui a nova variável Dj o nome do campo "workplaceP" e os valores de empregos
Dj <- Dj0[Dj2]
### Leitura da matriz OD de tempos de viagem por transporte público (não tem cabeçalho, separador de colunas ";" e decimal ",")
dij2 <- read.csv("PT_Time_SP_v3.csv", header=FALSE, sep = ";", dec = ",")
### Remove a linha e a coluna 1317 da matriz de tempos, pois não existe essa zona no arquivo shapefile
dij2 <- dij2[-1317, -c(1317)]
### Trata os tempos de viagem da Matriz OD e aplica o limiar de busca de empregos
dij2[dij2==0] <- 1
dij2[dij2>PuT] <- 0
dij2[dij2>0] <- 1
### Cria matriz de empregos com o mesmo número de linhas e colunas que a matriz de tempos
pop <- apply(Dj,1,sum)
pop <- matrix(pop,NROW(dij2),NCOL(dij2))
pop <- t(pop)
### Calcula os empregos que estão dentro do limiar de tempo de viagem parametrizado
total <- dij2*pop
result <- apply(total,1,sum)
result <- result[1:NCOL(dij2)]
### Calculo da acessibilidade cumulativa
cumacc <- result
Dj<-Dj0[Dj1]
result <- cbind (Dj,cumacc)
natural.interval <- classIntervals(result$cumacc,10, style = "jenks")$brks
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
map <- readOGR(dsn="shapefiles",layer= paste("Acessibilidade_Cumulativa_PuT_", PuT,"min", sep=""))
map <- spTransform(map,CRS=CRS("+init=epsg:32723"))
map.data <- data.frame(id=rownames(map@data), map@data)
map.df <- fortify(map)
map.df <- merge(map.df,map.data,by="id")
### Salvando o plot como imagem
filename <- paste("plots/CumAcc_Put",PuT, ".pdf",sep = "")
pdf(file = paste("plots/CumAcc_Put",PuT, ".pdf",sep = ""))
graphics.off()
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade Cumulativa aos Empregos PuT", PuT, "Minutos"), x="", y="")+
coord_fixed()
plot(plot.natural)
dev.off()
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
View(dij2)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
combine <- merge (shp, result, by.x='code', by.y="code")
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
combine <- merge (shp, result, by.x='CODE', by.y="code")
vaux <- grep("Paulo" ,combine@data[["MUNICIPI0"]], ignore.case = TRUE)
combine <- combine[vaux,]
shapefile(combine, "shapefiles/Acessibilidade_Gravitacional.shp", overwrite=TRUE)
map <- readOGR(dsn="shapefiles",layer= "Acessibilidade_Gravitacional")
map <- spTransform(map,CRS=CRS("+init=epsg:32723"))
map.data <- data.frame(id=rownames(map@data), map@data)
map.df <- fortify(map)
map.df <- merge(map.df,map.data,by="id")
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(result$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(result$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title="Acessibilidade Gravitacional aos Empregos PuT", x="", y="")+
coord_fixed()
plot(plot.natural)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/03_Acessibilidade_2SFCA_V2.0.R", echo=TRUE)
graphics.off()
### Se escolher classificar o mapa em quebras naturais
colourCount = length(unique(acctot$natural))
col <- rev(brewer.pal(10, "Spectral"))
pal.natural <- colorRampPalette(col)(colourCount)
ncolour.natural <- sort(unique(acctot$interval0))
pal.natural2 <- pal.natural[ncolour.natural]
plot.natural = ggplot(map.df[which(map.df$natural!="NA"),], aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=natural))+
geom_path(colour=NA)+
scale_fill_manual(values =pal.natural2)+
theme(axis.text=element_blank())+
labs(title=paste("Acessibilidade aos empregos PuT", PuT, "minutos 2SFCA"), x="", y="")+
coord_fixed()
plot(plot.natural)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
plot(plot.natural)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/Cod_R/ae_acessibilidade_alterado/01_Acessibilidade_Cumulativa_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/02_Acessibilidade_Gravitacional_V2.0.R", echo=TRUE)
plot(plot.natural)
inteiro <-  read.csv("PT_Time_SP_v3.csv")
View(inteiro)
size(inteiro)
dim(inteiro)
pt1 <- inteiro[,c(1:631)]
pt2 <- inteiro[,c(632:1262)]
pt3 <- inteiro[,c(1263:1894)]
View(pt1)
inteiro_teste <-  cbind(pt1,pt2,pt3)
inteiro == inteiro_teste
if (inteiro == inteiro_teste) return TRUE
if (inteiro == inteiro_teste) return (TRUE)
write.csv(pt1,"PT_Time_SP_v3_pt1.csv")
inteiro <-  read.csv("PT_Time_SP_v3.csv", header=FALSE, sep = ";", dec = ",")
dim(inteiro)
pt1 <- inteiro[,c(1:631)]
pt2 <- inteiro[,c(632:1262)]
pt3 <- inteiro[,c(1263:1894)]
write.csv(pt1,"PT_Time_SP_v3_pt1.csv",  sep = ";", dec = ",")
write.csv(pt1,"PT_Time_SP_v3_pt1.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.csv(pt1,"PT_Time_SP_v3_pt1.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
inteiro <-  read.csv("PT_Time_SP_v3.csv", header=FALSE, sep = ";", dec = ",")
dim(inteiro)
pt1 <- inteiro[,c(1:631)]
pt2 <- inteiro[,c(632:1262)]
pt3 <- inteiro[,c(1263:1894)]
View(inteiro)
pt1 <- inteiro[,c(1:631)]
pt2 <- inteiro[,c(632:1263)]
pt3 <- inteiro[,c(1264:1895)]
write.csv(pt1,"PT_Time_SP_v3_pt1.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt1,"PT_Time_SP_v3_pt1.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt2,"PT_Time_SP_v3_pt2.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt3,"PT_Time_SP_v3_pt3.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/02_Acessibilidade_Gravitacional_V3.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/01_Acessibilidade_Cumulativa_V3.0.R", echo=TRUE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/01_Acessibilidade_Cumulativa_V3.0.R", echo=TRUE)
inteiro <-  read.csv("PT_Time_SP_v3.csv", header=FALSE, sep = ";", dec = ",")
dim(inteiro)
inteiro <-  read.csv("PT_Time_SP_v3.csv", header=FALSE, sep = ";", dec = ",")
dim(inteiro)
inteiro <-  read.csv("PT_Time_SP_v3.csv", header=FALSE, sep = ";", dec = ",")
inteiro <-  read.csv("PT_Time_SP_v3.csv", header=FALSE, sep = ";", dec = ",")
dim(inteiro)
pt1 <- inteiro[,c(1:315)]
pt2 <- inteiro[,c(316:631)]
pt3 <- inteiro[,c(632:947)]
pt4 <- inteiro[,c(948:1263)]
pt5 <- inteiro[,c(1264:1579)]
pt6 <- inteiro[,c(1580:1895)]
write.table(pt1,"PT_Time_SP_v3_pt1.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt2,"PT_Time_SP_v3_pt2.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt3,"PT_Time_SP_v3_pt3.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt4,"PT_Time_SP_v3_pt4.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt5,"PT_Time_SP_v3_pt5.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
write.table(pt6,"PT_Time_SP_v3_pt6.csv",
sep = ";",
dec = ",",
row.names = F,
col.names = F)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Acessibilidade_Lazer_SaoPaulo/02_Acessibilidade_Gravitacional_V3.0.R", echo=TRUE)
