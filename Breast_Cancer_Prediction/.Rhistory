View(plants)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex()
clear()
setwd("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Breast_Cancer_Prediction")
save.image("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Breast_Cancer_Prediction/BCP.RData")
library(readr)
col_names <- c("ID","clump_thickness","uniformity_cell_size",
"uniformity_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei",
"bland_chromatin","normal_nucleoli", "mitoses",
"class")
dados <- read_table("breast-cancer-wisconsin.data", col_names = col_names)
dados <- read.table("breast-cancer-wisconsin.data", header = FALSE,
sep = ",", dec = ".", col.names = col_names)
View(dados)
detach(readr)
detach("readr")
str(dados)
library(dplyr)
any(dados$bare_nuclei == "?")
count(any(dados$bare_nuclei == "?"))
count(bare_nuclei == "?")
count(dados$bare_nuclei == "?")
dados_cl <- dados[dados$bare_nuclei != "?"]
dados_cl <- dados[dados$bare_nuclei != "?",]
View(dados_cl)
library(tidyr)
dados_bruto <- read.table("breast-cancer-wisconsin.data", header = FALSE,
sep = ",", dec = ".", col.names = col_names)
dados <- dados_bruto
dados$class <- lapply(dados$class, function(x) ifelse(x==2,0,1))
View(dados)
View(dados_bruto)
library(dplyr)
library(tidyr)
col_names <- c("ID","clump_thickness","uniformity_cell_size",
"uniformity_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei",
"bland_chromatin","normal_nucleoli", "mitoses",
"class")
# Backup dos dados não tratados
dados_bruto <- read.table("breast-cancer-wisconsin.data", header = FALSE,
sep = ",", dec = ".", col.names = col_names)
# Df para tratamento dos dados
dados <- dados_bruto
# Binarizando a coluna Class
dados$class <- lapply(dados$class, function(x) ifelse(x==2,0,1))
dados %>% summarise(bare_nuclei == "?")
dados %>% summarise(n(bare_nuclei == "?"))
dados %>% count(summarise(bare_nuclei == "?"))
dados %>% count(sbare_nuclei == "?")
dados %>% group_by(bare_nuclei) %>% n()
dados %>% group_by(bare_nuclei) %>% n(.)
dados %>% group_by(bare_nuclei) %>% count()
dados %>% group_by(bare_nuclei) %>% select(bare_nuclei == "?") %>% count()
dados %>% group_by(bare_nuclei) %>% filter(bare_nuclei == "?") %>% count()
dados %>% filter(bare_nuclei == "?") %>% count()
/ (dados %>%  count(bare_nuclei)
qtd_vazios = 100 * dados %>% filter(bare_nuclei == "?") %>% count() / dados %>%  count(bare_nuclei)
qtd_vazios = 100 * dados %>% filter(bare_nuclei == "?") %>% count()
unlist(qtd_vazios)
View(qtd_vazios)
qtd_vazios <-  dados %>% filter(bare_nuclei == "?") %>% count()
qtd_vazios <-  unlist(qtd_vazios)
class(qtd_vazios)
/ unlist(dados %>% count(bare_nuclei))
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / unlist(dados %>% count(bare_nuclei))
dados %>% count(bare_nuclei)
dados %>% length(bare_nuclei)
length(dados$bare_nuclei)
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios
qtd_vazios <- unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios
print(qtd_vazios, "%")
print(qtd_vazios + "%")
qtd_vazios
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios
dados <- dados[dados$bare_nuclei != "?",]
dados
str(dados)
dados$bare_nuclei <- as.integer(dados$bare_nuclei)
str(dados)
View(dados)
class(dados$class)
class(dados$uniformity_cell_size)
# Binarizando a coluna Class
dados$class <- sapply(dados$class, function(x) ifelse(x==2,0,1))
class(dados$class)
str(dados)
# Binarizando a coluna Class
dados$class <- sapply(dados$class, as.integer (function(x) ifelse(x==2,0,1)))
# Binarizando a coluna Class
dados$class <- sapply(dados$class, function(x) as.integer(ifelse(x==2,0,1)))
class(dados$class)
str(dados)
remove(dados_cl)
View(dados_bruto)
# Df para tratamento dos dados
dados <- dados_bruto
# Binarizando a coluna Class
dados$class <- sapply(dados$class, function(x) as.integer(ifelse(x==2,0,1)))
# Estudando NAs
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios # 2.3% de NAs (16 observações de 699) -> dropar
# Excluindo linhas com NA
dados <- dados[dados$bare_nuclei != "?",]
dados$bare_nuclei <- as.integer(dados$bare_nuclei)
str(dados)
# Removendo a coluna ID (irelevante/prejudicial para o modelo preditivo)
dados <- dados [-1]
# Estudando NAs
any(is.na(dados))
# Df para tratamento dos dados
dados <- dados_bruto
# Binarizando a coluna Class
dados$class <- sapply(dados$class, function(x) as.integer(ifelse(x==2,0,1)))
# Estudando NAs
any(is.na(dados))
any(`is.na<-`(dados, "?"))
# Estudando NAs
any(is.na(dados))
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios # 2.3% de NAs (16 observações de 699) -> dropar
# Excluindo linhas com NA
dados <- dados[dados$bare_nuclei != "?",]
dados$bare_nuclei <- as.integer(dados$bare_nuclei)
str(dados)
# Removendo a coluna ID (irelevante/prejudicial para o modelo preditivo)
dados <- dados [-1]
str(dados)
# Fatorizando a coluna Class
table(dados$class)
dados$class <- factor(dados$class, levels = c(0,1),
labels = c("Benigno", "Maligno"))
str(dados)
# Fatorizando a coluna Class
table(dados$class)
# Backup dos dados não tratados
dados_bruto <- read.table("breast-cancer-wisconsin.data", header = FALSE,
sep = ",", dec = ".", col.names = col_names)
# Df para tratamento dos dados
dados <- dados_bruto
# Estudando NAs
any(is.na(dados))
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios # 2.3% de NAs (16 observações de 699) -> dropar
# Excluindo linhas com NA
dados <- dados[dados$bare_nuclei != "?",]
dados$bare_nuclei <- as.integer(dados$bare_nuclei)
str(dados)
# Removendo a coluna ID (irelevante/prejudicial para o modelo preditivo)
dados <- dados [-1]
str(dados)
# Fatorizando a coluna Class
table(dados$class)
dados$class <- factor(dados$class, levels = c(2,4),
labels = c("Benigno", "Maligno"))
str(dados)
# Verificando a proporção de Class
round(prop.table(table(dados$class)) * 100, digits = 1)
# Verificando a proporção de Class
round(prop.table(table(dados$class)) * 100, digits = 2)
# Verificando a proporção de Class
round(prop.table(table(dados$class)) * 100, digits = 1)
# Normalizando os dados
summary(dados)
library(class)
# divisão dados treino e teste
d_treino <- sample_frac(dados, size = 0.7)
# divisão dados treino e teste
d_treino <- sample_frac(dados, size = 0.8)
d_teste <- dados[-d_treino]
d_teste <- dados[!d_treino]
d_teste <- dados != d_treino
d_teste <- dados - d_treino
# divisão dados treino e teste
d_treino <- dados[0:546,]
d_teste <- dados [547:683,]
# Labels
d_treino_labels <- dados[0:546,10]
d_teste_labels <- dados [547:683,10]
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=1)
# Divisão dados treino e teste
d_treino <- dados[1:546,]
d_teste <- dados [547:683,]
# Labels
d_treino_labels <- dados[1:546,10]
d_teste_labels <- dados [547:683,10]
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=1)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21)
# Tranformando os tipos de dados para Numérico
dados <- as.numeric(dados[c(1:9)])
# Tranformando os tipos de dados para Numérico
dados[c(1:9)] <- as.numeric(dados[c(1:9)])
x <- dados[1]
View(x)
x <- as.numeric(dados[1])
str(x)
x <- type.convert(dados[1], "numeric")
# Tranformando os tipos de dados para Numérico
dados[c(1:9)] <- sapply(dados[c(1:9)], as.numeric)
col_names <- c("ID","clump_thickness","uniformity_cell_size",
"uniformity_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei",
"bland_chromatin","normal_nucleoli", "mitoses",
"class")
# Backup dos dados não tratados
dados_bruto <- read.table("breast-cancer-wisconsin.data", header = FALSE,
sep = ",", dec = ".", col.names = col_names)
# Df para tratamento dos dados
dados <- dados_bruto
# Estudando NAs
any(is.na(dados))
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios # 2.3% de NAs (16 observações de 699) -> dropar
# Excluindo linhas com NA
dados <- dados[dados$bare_nuclei != "?",]
str(dados)
# Removendo a coluna ID (irelevante/prejudicial para o modelo preditivo)
dados <- dados [-1]
str(dados)
# Tranformando os tipos de dados para Numérico
dados[c(1:9)] <- sapply(dados[c(1:9)], as.numeric)
# Fatorizando a coluna Class
table(dados$class)
dados$class <- factor(dados$class, levels = c(2,4),
labels = c("Benigno", "Maligno"))
str(dados)
# Verificando a proporção de Class
round(prop.table(table(dados$class)) * 100, digits = 1)
# Divisão dados treino e teste
d_treino <- dados[1:546,]
d_teste <- dados [547:683,]
# Labels
d_treino_labels <- dados[1:546,10]
d_teste_labels <- dados [547:683,10]
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl, k=21)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, k=21)
# Estudando NAs
any(is.na(dados))
qtd_vazios <-  100 * unlist(dados %>% filter(bare_nuclei == "?") %>% count()) / length(dados$bare_nuclei)
qtd_vazios # 2.3% de NAs (16 observações de 699) -> dropar
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21)
str(dados)
distintos < - sapply(dados, count)
distintos <- sapply(dados, count)
distintos <- sapply(dados, n())
distintos <- sapply(dados, n)
distintos <- sapply(dados, distinct)
summary(dados)
# Divisão dados treino e teste
d_treino <- dados[1:546,1:9]
d_teste <- dados [547:683,1:9]
# Labels
d_treino_labels <- dados[1:546,10]
d_teste_labels <- dados [547:683,10]
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21)
install.packages("gmodels")
library(gmodels)
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
source("D:/Users/T-Gamer/Documents/Profissional_D/DataScience/Portfolio/DataScience-R/Breast_Cancer_Prediction/Breat_Cancer_Prediction_Model.R", echo=TRUE)
# Divisão dados treino e teste
d_treino <- dados[1:480,1:9]
d_teste <- dados [481:683,1:9]
# Labels
d_treino_labels <- dados[1:480,10]
d_teste_labels <- dados [481:683,10]
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21)
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=1)
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=5)
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21)
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
# Avaliando modelo
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = TRUE)
# Avaliando modelo
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSe)
# Avaliando modelo
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21, prob = T)
# Avaliando modelo
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
# Criando o modelo
modelo <- knn(train = d_treino, test = d_teste, cl = d_treino_labels, k=21)
# Avaliando modelo
CrossTable(x = d_teste_labels, y = modelo, prop.chisq = FALSE)
# Calculando taxa de erro
prev = NULL
taxa_erro = NULL
suppressWarnings(
for(i in 1:21){
set.seed(101)
prev = knn(train = d_treino, test = d_teste, cl = d_treino_labels, k = i)
taxa_erro[i] = mean(dados$class != prev)
})
# Obtendo os valores de k e das taxas de erro
k.values <- 1:21
df_erro <- data.frame(taxa_erro, k.values)
df_erro
ggplot(df_erro, aes(x = k.values, y = taxa_erro)) + geom_point()+ geom_line(lty = "dotted", color = 'red')
library(ggplot2)
ggplot(df_erro, aes(x = k.values, y = taxa_erro)) + geom_point()+ geom_line(lty = "dotted", color = 'red')
